// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // A Register
        Mux16(a=instruction, b=ALUOutput, sel=instruction[15], out=ARegisterInput);
        // Load the A register:
            // If it is an A instruction
            // If d1 if it is a C instruction
        And(a=instruction[15], b=instruction[5], out=ALoadOr1);
        Not(in=instruction[15], out=ALoadOr2);
        Or(a=ALoadOr1, b=ALoadOr2, out=ARegisterLoad);
        ARegister(in=ARegisterInput, load=ARegisterLoad, out=ARegisterOutput);

    // D Register
        And(a=instruction[4], b=instruction[15], out=DRegisterLoad);    // It is a C instruction and d2 is on
        DRegister(in=ALUOutput, load=DRegisterLoad, out=DRegisterOutput);

    // ALU
        Mux16(a=ARegisterOutput, b=inM, sel=instruction[12], out=ALUYInput);
        ALU(x=DRegisterOutput, y=ALUYInput, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUOutput, zr=zr, ng=ng);

    // Memory
        Or16(a=ARegisterOutput, b=false, out[0..14]=addressM);
        And(a=instruction[15], b=instruction[3], out=writeM);
        Or16(a=ALUOutput, b=false, out=outM);

    // PC

        And(a=instruction[0], b=instruction[15], out=j3);
        And(a=instruction[1], b=instruction[15], out=j2);
        And(a=instruction[2], b=instruction[15], out=j1);

        Not(in=zr, out=notzr);
        Not(in=ng, out=notng);

        And(a=notng, b=notzr, out=notzrnotng);
        And(a=j3, b=notzrnotng, out=c1);
        And(a=j2, b=zr, out=c2);
        And(a=j2, b=j3, out=j2j3);
        And(a=j2j3, b=notng, out=c3);
        And(a=j1, b=ng, out=c4);
        And(a=j1, b=j3, out=j1j3);
        And(a=j1j3, b=notzr, out=c5);
        And(a=j1, b=j2, out=j1j2);
        Or(a=zr, b=ng, out=zrorng);
        And(a=j1j2, b=zrorng, out=c6);
        And(a=j1j2, b=j2j3, out=c7);
        Or(a=c1, b=c2, out=c1c2);
        Or(a=c1c2, b=c3, out=c1c2c3);
        Or(a=c1c2c3, b=c4, out=c1c2c3c4);
        Or(a=c1c2c3c4, b=c5, out=c1c2c3c4c5);
        Or(a=c1c2c3c4c5, b=c6, out=b);
        Or(a=b, b=c7, out=PCLoad);
        Not(in=PCLoad, out=PCInc);

        PC(in=ARegisterOutput, load=PCLoad, inc=PCInc, reset=reset, out[0..14]=pc);
}